openapi: 3.0.3
info:
  title: Asana Plugin
  description: A plugin that allows the user to interact with Asana using ChatGPT.
  termsOfService: https://asana.com/terms
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://app.asana.com/api/1.0
paths:
  /projects:
    post:
      summary: Create a project
      description: |-
        Create a new project in a workspace or team.

        Every project is required to be created in a specific workspace or
        organization, and this cannot be changed once set. Note that you can use
        the `workspace` parameter regardless of whether or not it is an
        organization.
      tags:
        - Projects
      operationId: createProject
      requestBody:
        description: The project to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/ProjectRequest"
      responses:
        "201":
          description: Successfully retrieved projects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProjectResponse"
  /projects/{project_gid}/sections:
    post:
      summary: Create a section in a project
      description: >-
        Creates a new section in a project. Returns the full record of the newly created section.
      tags:
        - Sections
      operationId: createSectionForProject
      parameters:
        - name: project_gid
          in: path
          description: >-
            Globally unique identifier for the project.
          required: true
          schema:
            type: string
          example: "1331"
      requestBody:
        description: The section to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/SectionRequest"
      responses:
        "201":
          description: Successfully created the specified section.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/SectionResponse"
  /tasks:
    get:
      summary: Get multiple tasks
      description: >-
        Returns the compact task records for some filtered set of tasks. Use one
        or more of the parameters provided to filter the tasks returned. You must
        specify a `project` or `tag` if you do not specify `assignee` and
        `workspace`.
      tags:
        - Tasks
      operationId: getTasks
      parameters:
        - name: limit
          in: query
          description: >-
            Results per page.

            The number of objects to return per page. The value must be between 1
            and 100.
          example: 50
          schema:
            type: integer
        - name: offset
          in: query
          description: >-
            An offset to the next page returned by the API. A pagination request
            will return an offset token, which can be used as an input parameter to
            the next request. If an offset is not passed in, the API will return
            the first page of results.
          example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
          schema:
            type: string
        - name: assignee
          in: query
          description: >-
            The assignee to filter tasks on. If searching for unassigned tasks, assignee.any
            = null can be specified.

            *Note: If you specify `assignee`, you must also specify the
            `workspace` to filter on.*
          schema:
            type: string
          example: "14641"
        - name: project
          in: query
          description: >-
            The project to filter tasks on.
          schema:
            type: string
          example: "321654"
        - name: section
          in: query
          description: >-
            The section to filter tasks on.
          schema:
            type: string
          example: "321654"
        - name: workspace
          in: query
          description: >-
            The workspace to filter tasks on.

            *Note: If you specify `workspace`, you must also specify the
            `assignee` to filter on.*
          schema:
            type: string
          example: "321654"
        - name: completed_since
          in: query
          description: >-
            Only return tasks that are either incomplete or that have been
            completed since this time.
          schema:
            type: string
            format: date-time
            example: "2012-02-22T02:06:58.158Z"
        - name: modified_since
          in: query
          description: |-
            Only return tasks that have been modified since the given time.

            *Note: A task is considered “modified” if any of its properties
            change, or associations between it and other objects are modified
            (e.g.  a task being added to a project). A task is not considered
            modified just because another object it is associated with (e.g. a
            subtask) is modified. Actions that count as modifying the task
            include assigning, renaming, completing, and adding stories.*
          schema:
            type: string
            format: date-time
          example: "2012-02-22T02:06:58.158Z"
      responses:
        "200":
          description: Successfully retrieved requested tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskCompact"
    post:
      summary: Create a task
      description: |-
        Creating a new task is as easy as POSTing to the `/tasks` endpoint with a
        data block containing the fields you’d like to set on the task. Any
        unspecified fields will take on default values.
      tags:
        - Tasks
      operationId: createTask
      requestBody:
        description: The task to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/TaskRequest"
      responses:
        "201":
          description: Successfully created a new task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TaskResponse"
  /users/{user_gid}:
    get:
      tags:
        - Users
      summary: Get a user
      description: >-
        Returns the full user record for the single user with the provided ID.
      operationId: getUser
      parameters:
        - name: user_gid
          in: path
          description: >-
            A string identifying a user. This can either be the string "me", an email,
            or the gid of a user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns the user specified.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
  /workspaces/{workspace_gid}/typeahead:
    get:
      summary: Get objects via typeahead
      description: |-
        Retrieves objects in the workspace based via an auto-completion/typeahead
        search algorithm.
      tags:
        - Typeahead
      operationId: typeaheadForWorkspace
      parameters:
        - name: workspace_gid
          in: path
          description: >-
            Globally unique identifier for the workspace or organization.
          required: true
          schema:
            type: string
          example: "12345"
        - name: resource_type
          in: query
          description: >-
            The type of values the typeahead should return. You can choose from one
            of the following: `custom_field`, `project`, `project_template`,
            `portfolio`, `tag`, `task`, and `user`.
          required: true
          schema:
            type: string
            enum:
              - custom_field
              - project
              - project_template
              - portfolio
              - tag
              - task
              - user
            default: user
        - name: type
          in: query
          description: >-
            *Deprecated: new integrations should prefer the resource_type field.*
          required: false
          schema:
            type: string
            enum:
              - custom_field
              - portfolio
              - project
              - tag
              - task
              - user
            default: user
        - name: query
          in: query
          description: >-
            The string that will be used to search for relevant objects. If an
            empty string is passed in, the API will return results.
          schema:
            type: string
          example: Greg
        - name: count
          in: query
          description: >-
            The number of results to return. The default is 20 if this parameter is
            omitted, with a minimum of 1 and a maximum of 100. If there are fewer
            results found than requested, all will be returned.
          schema:
            type: integer
          example: 20
      responses:
        "200":
          description: >-
            Successfully retrieved objects via a typeahead search algorithm.
          content:
            application/json:
              schema:
                type: object
                description: >-
                  A generic list of objects, such as those returned by the typeahead
                  search
                  endpoint.
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        gid:
                          description: >-
                            Globally unique identifier of the resource, as a string.
                          type: string
                          readOnly: true
                          example: "12345"
                        resource_type:
                          description: The base type of this resource.
                          type: string
                          readOnly: true
                          example: typeahead
                        name:
                          description: The name of the object.
                          type: string
                          example: Bug Task
components:
  schemas:
    CustomFieldCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: task
        name:
          description: The name of the custom field.
          type: string
          example: Status
        resource_subtype:
          description: >
            The type of the custom field. Must be one of the given values.
          type: string
          example: text
          enum:
            - text
            - enum
            - multi_enum
            - number
            - date
            - people
        type:
          description: >-
            *Deprecated: new integrations should prefer the resource_subtype
            field.* The type of the custom field. Must be one of the given
            values.
          type: string
          readOnly: true
          enum:
            - text
            - enum
            - multi_enum
            - number
        enum_options:
          description: >-
            *Conditional*. Only relevant for custom fields of type `enum`.
            This array specifies the possible values which an `enum` custom
            field can adopt. To modify the enum options, refer to [working
            with enum
            options](/reference/createenumoptionforcustomfield).
          type: array
          items:
            $ref: "#/components/schemas/EnumOption"
        enabled:
          description: >-
            *Conditional*. Determines if the custom field is enabled or not.
          type: boolean
          example: true
        date_value:
          description: >-
            *Conditional*. Only relevant for custom fields of type `date`.
            This object reflects the chosen date (and optionally, time) value
            of a `date` custom field. If no date is selected, the value of
            `date_value` will be `null`.
          type: object
          properties:
            date:
              type: string
              description: >-
                A string representing the date in YYYY-MM-DD format.
              example: "2024-08-23"
            date_time:
              type: string
              description: >-
                A string representing the date in ISO 8601 format. If no time
                value
                is selected, the value of `date-time` will be `null`.
              example: "2024-08-23T22:00:00.000Z"
        enum_value:
          allOf:
            - $ref: "#/components/schemas/EnumOption"
            - type: object
              description: >-
                *Conditional*. Only relevant for custom fields of type
                `enum`. This object is the chosen value of an `enum` custom
                field.
        multi_enum_values:
          description: >-
            *Conditional*. Only relevant for custom fields of type
            `multi_enum`. This object is the chosen values of a `multi_enum` custom
            field.
          type: array
          items:
            $ref: "#/components/schemas/EnumOption"
        number_value:
          description: >-
            *Conditional*. This number is the value of a `number` custom field.
          type: number
          example: 5.2
        text_value:
          description: >-
            *Conditional*. This string is the value of a `text` custom field.
          type: string
          example: Some Value
        display_value:
          description: >-
            A string representation for the value of the custom field.
            Integrations that don't require the underlying type should
            use this field to read values. Using this field will future-proof
            an app against new custom field types.
          type: string
          readOnly: true
          example: blue
          nullable: true
    CustomFieldResponse:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: custom_field
        name:
          description: The name of the custom field.
          type: string
          example: Status
        resource_subtype:
          description: >
            The type of the custom field. Must be one of the given values.
          type: string
          example: text
          enum:
            - text
            - enum
            - multi_enum
            - number
            - date
            - people
        type:
          description: >
            *Deprecated: new integrations should prefer the resource_subtype
            field.* The type of the custom field. Must be one of the given
            values.
          type: string
          readOnly: true
          enum:
            - text
            - enum
            - multi_enum
            - number
        enum_options:
          description: >-
            *Conditional*. Only relevant for custom fields of type `enum`.
            This array specifies the possible values which an `enum` custom
            field can adopt. To modify the enum options, refer to [working
            with enum
            options](/reference/createenumoptionforcustomfield).
          type: array
          items:
            $ref: "#/components/schemas/EnumOption"
        enabled:
          description: >-
            *Conditional*. Determines if the custom field is enabled or not.
          type: boolean
          example: true
        date_value:
          description: >-
            *Conditional*. Only relevant for custom fields of type `date`.
            This object reflects the chosen date (and optionally, time) value
            of a `date` custom field. If no date is selected, the value of
            `date_value` will be `null`.
          type: object
          properties:
            date:
              type: string
              description: >-
                A string representing the date in YYYY-MM-DD format.
              example: "2024-08-23"
            date_time:
              type: string
              description: >-
                A string representing the date in ISO 8601 format. If no time
                value
                is selected, the value of `date-time` will be `null`.
              example: "2024-08-23T22:00:00.000Z"
        enum_value:
          allOf:
            - $ref: "#/components/schemas/EnumOption"
            - type: object
              description: >-
                *Conditional*. Only relevant for custom fields of type
                `enum`. This object is the chosen value of an `enum` custom
                field.
        multi_enum_values:
          description: >-
            *Conditional*. Only relevant for custom fields of type
            `multi_enum`. This object is the chosen values of a `multi_enum` custom
            field.
          type: array
          items:
            $ref: "#/components/schemas/EnumOption"
        number_value:
          description: >-
            *Conditional*. This number is the value of a `number` custom field.
          type: number
          example: 5.2
        text_value:
          description: >-
            *Conditional*. This string is the value of a `text` custom field.
          type: string
          example: Some Value
        display_value:
          description: >-
            A string representation for the value of the custom field.
            Integrations that don't require the underlying type should
            use this field to read values. Using this field will future-proof
            an app against new custom field types.
          type: string
          readOnly: true
          example: blue
          nullable: true
        description:
          description: >-
            [Opt
            In](/docs/inputoutput-options).
            The description of the custom field.
          type: string
          example: Development team priority
        precision:
          description: >-
            Only relevant for custom fields of type ‘Number’. This field
            dictates the number of places after the decimal to round to, i.e.
            0 is integer values, 1 rounds to the nearest tenth, and so on.
            Must be between 0 and 6, inclusive.

            For percentage format, this may be unintuitive, as a value of 0.25
            has a precision of 0, while a value of 0.251 has a precision of 1.
            This is due to 0.25 being displayed as 25%.

            The identifier format will always have a precision of 0.
          type: integer
          example: 2
        format:
          description: >-
            The format of this custom field.
          type: string
          enum:
            - currency
            - identifier
            - percentage
            - custom
            - none
          example: custom
        currency_code:
          description: >-
            ISO 4217 currency code to format this custom field. This will be
            null if the `format` is not `currency`.
          type: string
          nullable: true
          example: EUR
        custom_label:
          description: >-
            This is the string that appears next to the custom field value.
            This will be null if the `format` is not `custom`.
          type: string
          nullable: true
          example: gold pieces
        custom_label_position:
          description: >-
            Only relevant for custom fields with `custom` format. This depicts
            where to place the custom label. This will be null if the `format`
            is not `custom`.
          type: string
          enum:
            - prefix
            - suffix
          example: suffix
        is_global_to_workspace:
          description: >-
            This flag describes whether this custom field is available to
            every container in the workspace. Before project-specific custom
            fields, this field was always true.
          type: boolean
          example: true
          readOnly: true
        has_notifications_enabled:
          description: >-
            *Conditional*. This flag describes whether a follower of a task
            with this field should receive inbox notifications from changes
            to this field.
          type: boolean
          example: true
        asana_created_field:
          description: >-
            *Conditional*. A unique identifier to associate this field with the
            template source of truth.
          type: string
          readOnly: true
          nullable: true
          enum:
            - a_v_requirements
            - account_name
            - actionable
            - align_shipping_link
            - align_status
            - allotted_time
            - appointment
            - approval_stage
            - approved
            - article_series
            - board_committee
            - browser
            - campaign_audience
            - campaign_project_status
            - campaign_regions
            - channel_primary
            - client_topic_type
            - complete_by
            - contact
            - contact_email_address
            - content_channels
            - content_channels_needed
            - content_stage
            - content_type
            - contract
            - contract_status
            - cost
            - creation_stage
            - creative_channel
            - creative_needed
            - creative_needs
            - data_sensitivity
            - deal_size
            - delivery_appt
            - delivery_appt_date
            - department
            - department_responsible
            - design_request_needed
            - design_request_type
            - discussion_category
            - do_this_task
            - editorial_content_status
            - editorial_content_tag
            - editorial_content_type
            - effort
            - effort_level
            - est_completion_date
            - estimated_time
            - estimated_value
            - expected_cost
            - external_steps_needed
            - favorite_idea
            - feedback_type
            - financial
            - funding_amount
            - grant_application_process
            - hiring_candidate_status
            - idea_status
            - ids_link
            - ids_patient_link
            - implementation_stage
            - insurance
            - interview_area
            - interview_question_score
            - itero_scan_link
            - job_s_applied_to
            - lab
            - launch_status
            - lead_status
            - localization_language
            - localization_market_team
            - localization_status
            - meeting_minutes
            - meeting_needed
            - minutes
            - mrr
            - must_localize
            - name_of_foundation
            - need_to_follow_up
            - next_appointment
            - next_steps_sales
            - num_people
            - number_of_user_reports
            - office_location
            - onboarding_activity
            - owner
            - participants_needed
            - patient_date_of_birth
            - patient_email
            - patient_phone
            - patient_status
            - phone_number
            - planning_category
            - point_of_contact
            - position
            - post_format
            - prescription
            - priority
            - priority_level
            - product
            - product_stage
            - progress
            - project_size
            - project_status
            - proposed_budget
            - publish_status
            - reason_for_scan
            - referral
            - request_type
            - research_status
            - responsible_department
            - responsible_team
            - risk_assessment_status
            - room_name
            - sales_counterpart
            - sentiment
            - shipping_link
            - social_channels
            - stage
            - status
            - status_design
            - status_of_initiative
            - system_setup
            - task_progress
            - team
            - team_marketing
            - team_responsible
            - time_it_takes_to_complete_tasks
            - timeframe
            - treatment_type
            - type_work_requests_it
            - use_agency
            - user_name
            - vendor_category
            - vendor_type
            - word_count
          example: priority
        created_by:
          $ref: "#/components/schemas/UserCompact"
        people_value:
          description: >-
            *Conditional*. Only relevant for custom fields of type `people`.
            This array of [compact user](/reference/users) objects reflects the
            values
            of a `people` custom field.
          type: array
          items:
            $ref: "#/components/schemas/UserCompact"
    CustomFieldSettingResponse:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: custom_field_setting
        project:
          allOf:
            - $ref: "#/components/schemas/ProjectCompact"
            - type: object
              description: >-
                *Deprecated: new integrations should prefer the `parent`
                field.* The id of the project that this custom field settings
                refers to.
              readOnly: true
        is_important:
          description: >-
            `is_important` is used in the Asana web application to determine
            if this custom field is displayed in the list/grid view of a project
            or portfolio.
          type: boolean
          readOnly: true
          example: false
        parent:
          allOf:
            - $ref: "#/components/schemas/ProjectCompact"
            - type: object
              description: >-
                The parent to which the custom field is applied. This can be a
                project or portfolio and indicates that the tasks or projects
                that the parent contains may be given custom field values for
                this custom field.
              readOnly: true
        custom_field:
          allOf:
            - $ref: "#/components/schemas/CustomFieldResponse"
            - type: object
              description: >-
                The custom field that is applied to the `parent`.
              readOnly: true
    EnumOption:
      type: object
      description: >-
        Enum options are the possible values which an enum custom field can
        adopt. An enum custom field must contain at least 1 enum option but no
        more than 500.
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: enum_option
        name:
          description: The name of the enum option.
          type: string
          example: Low
        enabled:
          description: >-
            Whether or not the enum option is a selectable value for the
            custom field.
          type: boolean
          example: true
        color:
          description: >-
            The color of the enum option. Defaults to ‘none’.
          type: string
          example: blue
    Like:
      type: object
      description: >-
        An object to represent a user's like.
      properties:
        gid:
          description: >-
            Globally unique identifier of the object, as a string.
          type: string
          readOnly: true
          example: "12345"
        user:
          $ref: "#/components/schemas/UserCompact"
    ProjectBriefCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: project_brief
    ProjectCompact:
      type: object
      description: >-
        A *project* represents a prioritized list of tasks in Asana or a board
        with columns of tasks represented as cards. It exists in a single
        workspace or organization and is accessible to a subset of users in
        that workspace or organization, depending on its permissions.
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: project
        name:
          description: >-
            Name of the project. This is generally a short sentence fragment
            that fits on a line in the UI for maximum readability. However, it
            can be longer.
          type: string
          example: Stuff to buy
    ProjectResponse:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: project
        name:
          description: >-
            Name of the project. This is generally a short sentence fragment
            that fits on a line in the UI for maximum readability. However, it
            can be longer.
          type: string
          example: Stuff to buy
        archived:
          description: >-
            True if the project is archived, false if not. Archived projects
            do not show in the UI by default and may be treated differently
            for queries.
          type: boolean
          example: false
        color:
          description: Color of the project.
          type: string
          nullable: true
          enum:
            - dark-pink
            - dark-green
            - dark-blue
            - dark-red
            - dark-teal
            - dark-brown
            - dark-orange
            - dark-purple
            - dark-warm-gray
            - light-pink
            - light-green
            - light-blue
            - light-red
            - light-teal
            - light-brown
            - light-orange
            - light-purple
            - light-warm-gray
          example: light-green
        created_at:
          description: The time at which this resource was created.
          type: string
          format: date-time
          readOnly: true
          example: "2012-02-22T02:06:58.147Z"
        current_status:
          $ref: "#/components/schemas/ProjectStatusResponse"
        current_status_update:
          $ref: "#/components/schemas/StatusUpdateCompact"
        custom_field_settings:
          description: Array of Custom Field Settings (in compact form).
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/CustomFieldSettingResponse"
        default_view:
          description: The default view (list, board, calendar, or timeline) of
            a project.
          type: string
          enum:
            - list
            - board
            - calendar
            - timeline
          example: calendar
        due_date:
          description: >-
            *Deprecated: new integrations should prefer the `due_on` field.*
          type: string
          nullable: true
          format: date-time
          example: "2019-09-15T02:06:58.147Z"
        due_on:
          description: >-
            The day on which this project is due. This takes a date with
            format YYYY-MM-DD.
          type: string
          nullable: true
          format: date-time
          example: "2019-09-15T02:06:58.147Z"
        html_notes:
          description: >-
            [Opt In](/docs/inputoutput-options).
            The notes of the project with formatting as HTML.
          type: string
          example: <body>These are things we need to purchase.</body>
        members:
          description: Array of users who are members of this project.
          type: array
          items:
            $ref: "#/components/schemas/UserCompact"
          readOnly: true
        modified_at:
          description: >-
            The time at which this project was last modified.

            *Note: This does not currently reflect any changes in
            associations such as tasks or comments that may have been added or
            removed from the project.*
          type: string
          readOnly: true
          format: date-time
          example: "2012-02-22T02:06:58.147Z"
        notes:
          description: >-
            Free-form textual information associated with the
            project (ie., its description).
          type: string
          example: These are things we need to purchase.
        public:
          description: >-
            True if the project is public to its team.
          type: boolean
          example: false
        start_on:
          description: >-
            The day on which work for this project begins, or null if the
            project has no start date. This takes a date with `YYYY-MM-DD`
            format. *Note: `due_on` or `due_at` must be present in the
            request when setting or unsetting the `start_on` parameter.
            Additionally, `start_on` and `due_on` cannot be the same date.*
          type: string
          nullable: true
          format: date
          example: "2019-09-14"
        workspace:
          allOf:
            - $ref: "#/components/schemas/WorkspaceCompact"
            - type: object
              readOnly: true
              description: >-
                *Create-only*. The workspace or organization this project is
                associated with. Once created, projects cannot be moved to a
                different workspace. This attribute can only be specified at
                creation time.
        custom_fields:
          description: Array of Custom Fields.
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/CustomFieldCompact"
        completed:
          description: >-
            True if the project is currently marked complete, false if not.
          type: boolean
          readOnly: true
          example: false
        completed_at:
          description: >-
            The time at which this project was completed, or null if the project
            is not completed.
          type: string
          format: date-time
          readOnly: true
          nullable: true
          example: "2012-02-22T02:06:58.147Z"
        completed_by:
          $ref: "#/components/schemas/UserCompact"
        followers:
          description: >-
            Array of users following this project. Followers are a subset
            of members who have opted in to receive "tasks added"
            notifications for a project.
          type: array
          items:
            $ref: "#/components/schemas/UserCompact"
          readOnly: true
        owner:
          $ref: "#/components/schemas/UserCompact"
        team:
          $ref: "#/components/schemas/TeamCompact"
        icon:
          description: >-
            The icon for a project.
          type: string
          nullable: true
          enum:
            - list
            - board
            - timeline
            - calendar
            - rocket
            - people
            - graph
            - star
            - bug
            - light_bulb
            - globe
            - gear
            - notebook
            - computer
            - check
            - target
            - html
            - megaphone
            - chat_bubbles
            - briefcase
            - page_layout
            - mountain_flag
            - puzzle
            - presentation
            - line_and_symbols
            - speed_dial
            - ribbon
            - shoe
            - shopping_basket
            - map
            - ticket
            - coins
          example: chat_bubbles
        permalink_url:
          type: string
          readOnly: true
          description: >-
            A url that points directly to the object within Asana.
          example: https://app.asana.com/0/resource/123456789/list
        project_brief:
          allOf:
            - $ref: "#/components/schemas/ProjectBriefCompact"
            - type: object
              description: >-
                [Opt In](/docs/inputoutput-options).
                The project brief associated with this project.
              nullable: true
        created_from_template:
          allOf:
            - $ref: "#/components/schemas/ProjectTemplateCompact"
            - type: object
              description: >-
                [Opt In](/docs/inputoutput-options).
                The project template from which this project was created. If the
                project was
                not created from a template, this field will be null.
              nullable: true
    ProjectRequest:
      type: object
      properties:
        name:
          description: >-
            Name of the project. This is generally a short sentence fragment
            that fits on a line in the UI for maximum readability. However, it
            can be longer.
          type: string
          example: Stuff to buy
        archived:
          description: >-
            True if the project is archived, false if not. Archived projects
            do not show in the UI by default and may be treated differently
            for queries.
          type: boolean
          example: false
        color:
          description: Color of the project.
          type: string
          nullable: true
          enum:
            - dark-pink
            - dark-green
            - dark-blue
            - dark-red
            - dark-teal
            - dark-brown
            - dark-orange
            - dark-purple
            - dark-warm-gray
            - light-pink
            - light-green
            - light-blue
            - light-red
            - light-teal
            - light-brown
            - light-orange
            - light-purple
            - light-warm-gray
          example: light-green
        current_status:
          $ref: "#/components/schemas/ProjectStatusResponse"
        current_status_update:
          $ref: "#/components/schemas/StatusUpdateCompact"
        default_view:
          description: The default view (list, board, calendar, or timeline) of
            a project.
          type: string
          enum:
            - list
            - board
            - calendar
            - timeline
          example: calendar
        due_date:
          description: >-
            *Deprecated: new integrations should prefer the `due_on` field.*
          type: string
          nullable: true
          format: date-time
          example: "2019-09-15T02:06:58.147Z"
        due_on:
          description: >-
            The day on which this project is due. This takes a date with
            format YYYY-MM-DD.
          type: string
          nullable: true
          format: date-time
          example: "2019-09-15T02:06:58.147Z"
        html_notes:
          description: >-
            [Opt In](/docs/inputoutput-options).
            The notes of the project with formatting as HTML.
          type: string
          example: <body>These are things we need to purchase.</body>
        notes:
          description: >-
            Free-form textual information associated with the
            project (ie., its description).
          type: string
          example: These are things we need to purchase.
        public:
          description: >-
            True if the project is public to its team.
          type: boolean
          example: false
        start_on:
          description: >-
            The day on which work for this project begins, or null if the
            project has no start date. This takes a date with `YYYY-MM-DD`
            format. *Note: `due_on` or `due_at` must be present in the
            request when setting or unsetting the `start_on` parameter.
            Additionally, `start_on` and `due_on` cannot be the same date.*
          type: string
          nullable: true
          format: date
          example: "2019-09-14"
        custom_fields:
          description: >-
            An object where each key is a Custom Field GID and each value is
            an enum GID, string, number, or object.
          type: object
          additionalProperties:
            type: string
            description: >-
              "{custom_field_gid}" => Value (Can be text, number, etc.)
          example:
            "5678904321": On Hold
            "4578152156": Not Started
        followers:
          description: >-
            *Create-only*. Comma separated string of users. Followers
            are a subset of members who have opted in to receive "tasks
            added" notifications for a project.
          type: string
          example: 12345,23456
        owner:
          description: >-
            The current owner of the project, may be null.
          nullable: true
          type: string
          example: "12345"
        team:
          description: >-
            The team that this project is shared with.
          type: string
          example: "12345"
    ProjectStatusResponse:
      type: object
      required:
        - text
        - color
      properties:
        text:
          description: The text content of the status update.
          type: string
          example: The project is moving forward according to plan...
        html_text:
          description: >-
            [Opt
            In](/docs/inputoutput-options).
            The text content of the status update with formatting as HTML.
          type: string
          example: >-
            <body>The project <strong>is</strong> moving forward according to
            plan...</body>
        color:
          description: The color associated with the status update.
          type: string
          enum:
            - green
            - yellow
            - red
            - blue
        author:
          $ref: "#/components/schemas/UserCompact"
        created_at:
          description: The time at which this resource was created.
          type: string
          format: date-time
          readOnly: true
          example: "2012-02-22T02:06:58.147Z"
        created_by:
          $ref: "#/components/schemas/UserCompact"
        modified_at:
          description: >-
            The time at which this project status was last modified.

            *Note: This does not currently reflect any changes in
            associations such as comments that may have been added or
            removed from the project status.*
          type: string
          format: date-time
          readOnly: true
          example: "2012-02-22T02:06:58.147Z"
    ProjectTemplateCompact:
      type: object
      description: >-
        A *project template* is an object that allows new projects to be created
        with a predefined setup, which may include tasks, sections, Rules, etc.
        It simplifies the process of running a workflow that involves a similar
        set of work every time.
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: project_template
        name:
          description: >-
            Name of the project template.
          type: string
          example: Packing list
    StatusUpdateCompact:
      type: object
      description: >-
        A *status update* is an update on the progress of a particular
        project, portfolio, or goal, and is sent out to all of its parent's
        followers when created. These
        updates include both text describing the update and a `status_type`
        intended to represent the overall state of the project.
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: status_update
        title:
          description: The title of the status update.
          type: string
          example: Status Update - Jun 15
        resource_subtype:
          type: string
          description: >-
            The subtype of this resource. Different subtypes retain many of
            the same fields and behavior, but may render differently in Asana
            or represent resources with different semantic meaning.

            The `resource_subtype`s for `status` objects represent the type of
            their parent.
          enum:
            - project_status_update
            - portfolio_status_update
            - goal_status_update
          example: project_status_update
          readOnly: true
    SectionCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
        name:
          description: >-
            The name of the section (i.e. the text displayed as the section
            header).
          type: string
    SectionResponse:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
        name:
          description: >-
            The name of the section (i.e. the text displayed as the section
            header).
          type: string
        created_at:
          description: The time at which this resource was created.
          type: string
          format: date-time
          readOnly: true
        project:
          $ref: "#/components/schemas/ProjectCompact"
        projects:
          description: >-
            *Deprecated - please use project instead*
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/ProjectCompact"
    SectionRequest:
      type: object
      properties:
        name:
          description: >-
            The text to be displayed as the section name. This cannot be
            an empty string.
          type: string
        insert_before:
          description: >-
            An existing section within this project before which the added
            section should be inserted. Cannot be provided together with
            insert_after.
          type: string
        insert_after:
          description: >-
            An existing section within this project after which the added
            section should be inserted. Cannot be provided together with
            insert_before.
          type: string
      required:
        - project
        - name
    TagCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: task
        name:
          description: >-
            Name of the tag. This is generally a short sentence fragment that
            fits on a line in the UI for maximum readability. However, it can
            be longer.
          type: string
          example: Stuff to buy
    TaskCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: task
        name:
          description: The name of the task.
          type: string
          example: Bug Task
        resource_subtype:
          type: string
          description: >-
            The subtype of this resource. Different subtypes retain many of
            the same fields and behavior, but may render differently in Asana
            or represent resources with different semantic meaning.

            The resource_subtype `milestone` represent a single moment in
            time. This means tasks with this subtype cannot have a start_date.
          enum:
            - default_task
            - milestone
            - section
            - approval
          example: default_task
    TaskResponse:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: task
        name:
          description: The name of the task.
          type: string
          example: Bug Task
        resource_subtype:
          type: string
          description: >-
            The subtype of this resource. Different subtypes retain many of
            the same fields and behavior, but may render differently in Asana
            or represent resources with different semantic meaning.

            The resource_subtype `milestone` represent a single moment in
            time. This means tasks with this subtype cannot have a start_date.
          enum:
            - default_task
            - milestone
            - section
            - approval
          example: default_task
        approval_status:
          type: string
          description: >-
            *Conditional* Reflects the approval status of this task. This
            field is kept in sync with `completed`, meaning `pending`
            translates to false while `approved`, `rejected`, and
            `changes_requested` translate to true. If you set completed
            to true, this field will be set to `approved`.
          enum:
            - pending
            - approved
            - rejected
            - changes_requested
          example: pending
        assignee_status:
          description: >-
            *Deprecated* Scheduling status of this task for the user it is assigned
            to.
            This field can only be set if the assignee is non-null.
            Setting this field to "inbox" or "upcoming" inserts it at the top
            of the section, while the other options will insert at the bottom.
          type: string
          enum:
            - today
            - upcoming
            - later
            - new
            - inbox
          example: upcoming
        completed:
          description: >-
            True if the task is currently marked complete, false if not.
          type: boolean
          example: false
        completed_at:
          description: >-
            The time at which this task was completed, or null if the task is
            incomplete.
          type: string
          format: date-time
          readOnly: true
          nullable: true
          example: "2012-02-22T02:06:58.147Z"
        completed_by:
          allOf:
            - $ref: "#/components/schemas/UserCompact"
            - type: object
              readOnly: true
        created_at:
          description: The time at which this resource was created.
          type: string
          format: date-time
          readOnly: true
          example: "2012-02-22T02:06:58.147Z"
        dependencies:
          description: >-
            [OptIn](/docs/inputoutput-options).
            Array of resources referencing tasks that this task depends on.
            The objects contain only the gid of the dependency.
          type: array
          items:
            type: object
            properties:
              gid:
                description: >-
                  Globally unique identifier of the resource, as a string.
                type: string
                readOnly: true
                example: "12345"
              resource_type:
                description: The base type of this resource.
                type: string
                readOnly: true
                example: task
          readOnly: true
        dependents:
          description: >-
            [OptIn](/docs/inputoutput-options).
            Array of resources referencing tasks that depend on this task. The
            objects contain only the ID of the dependent.
          type: array
          items:
            type: object
            properties:
              gid:
                description: >-
                  Globally unique identifier of the resource, as a string.
                type: string
                readOnly: true
                example: "12345"
              resource_type:
                description: The base type of this resource.
                type: string
                readOnly: true
                example: task
          readOnly: true
        due_at:
          description: >-
            The UTC date and time on which this task is due, or null if the
            task has no due time. This takes an ISO 8601 date string in UTC
            and should not be used together with `due_on`.
          type: string
          format: date
          example: "2019-09-15"
          nullable: true
        due_on:
          description: >-
            The localized date on which this task is due, or null if the task
            has no due date. This takes a date with `YYYY-MM-DD` format and
            should not be used together with `due_at`.
          type: string
          format: date
          example: "2019-09-15"
          nullable: true
        external:
          description: >-
            *OAuth Required*. *Conditional*. This field is returned only
            if external values are set or included by using [Opt In]
            (/docs/inputoutput-options).

            The external field allows you to store app-specific metadata on
            tasks, including a gid that can be used to retrieve tasks and a
            data blob that can store app-specific character strings. Note that
            you will need to authenticate with Oauth to access or modify this
            data. Once an external gid is set, you can use the notation
            `external:custom_gid` to reference your object anywhere in the API
            where you may use the original object gid. See the page on Custom
            External Data for more details.
          type: object
          properties:
            gid:
              type: string
              example: "1234"
            data:
              type: string
              example: A blob of information.
          example:
            gid: my_gid
            data: A blob of information
        html_notes:
          description: >-
            [Opt
            In](/docs/inputoutput-options).
            The notes of the text with formatting as HTML.
          type: string
          example: >-
            <body>Mittens <em>really</em> likes the stuff from
            Humboldt.</body>
        hearted:
          description: >-
            *Deprecated - please use liked instead* True if the task is
            hearted by the authorized user, false if not.
          type: boolean
          example: true
          readOnly: true
        hearts:
          description: >-
            *Deprecated - please use likes instead* Array of likes for users
            who have hearted this task.
          type: array
          items:
            $ref: "#/components/schemas/Like"
          readOnly: true
        is_rendered_as_separator:
          description: >-
            [Opt In](/docs/inputoutput-options).
            In some contexts tasks can be rendered as a visual separator;
            for instance, subtasks can appear similar to
            [sections](/reference/sections) without being true
            `section` objects. If a `task` object is rendered this way in any
            context it will have the property `is_rendered_as_separator` set
            to `true`.
          type: boolean
          example: false
          readOnly: true
        liked:
          description: >-
            True if the task is liked by the authorized user, false if not.
          type: boolean
          example: true
        likes:
          description: Array of likes for users who have liked this task.
          type: array
          items:
            $ref: "#/components/schemas/Like"
          readOnly: true
        memberships:
          description: >-
            *Create-only*. Array of projects this task is associated with
            and the section it is in. At task creation time, this array can be
            used to add the task to specific sections. After task creation,
            these associations can be modified using the `addProject` and
            `removeProject` endpoints. Note that over time, more types of
            memberships may be added to this property.
          type: array
          readOnly: true
          items:
            type: object
            properties:
              project:
                $ref: "#/components/schemas/ProjectCompact"
              section:
                $ref: "#/components/schemas/SectionCompact"
        modified_at:
          description: |-
            The time at which this task was last modified.

            *Note: This does not currently reflect any changes in
            associations such as projects or comments that may have been
            added or removed from the task.*
          type: string
          format: date-time
          readOnly: true
          example: "2012-02-22T02:06:58.147Z"
        notes:
          description: >-
            Free-form textual information associated with the
            task (i.e. its description).
          type: string
          example: Mittens really likes the stuff from Humboldt.
        num_hearts:
          description: >-
            *Deprecated - please use likes instead* The number of users who
            have hearted this task.
          type: integer
          example: 5
          readOnly: true
        num_likes:
          description: The number of users who have liked this task.
          type: integer
          example: 5
          readOnly: true
        num_subtasks:
          description: >
            [Opt
            In](/docs/inputoutput-options).
            The number of subtasks on this task.
          type: integer
          example: 3
          readOnly: true
        start_at:
          description: >-
            Date and time on which work begins for the task, or null if the task
            has no start time. This takes an ISO 8601 date string in UTC
            and should not be used together with `start_on`.

            *Note: `due_at` must be present in the request when
            setting or unsetting the `start_at` parameter.*
          type: string
          nullable: true
          format: date
          example: "2019-09-14"
        start_on:
          description: >-
            The day on which work begins for the task , or null if the task
            has no start date. This takes a date with `YYYY-MM-DD` format and
            should not be used together with `start_at`.

            *Note: `due_on` or `due_at` must be present in the request when
            setting or unsetting the `start_on` parameter.*
          type: string
          nullable: true
          format: date
          example: "2019-09-14"
        actual_time_minutes:
          description: >-
            This value represents the sum of all the Time Tracking entries in
            the Actual Time field on a given Task. It is represented as a nullable
            long value.
          type: number
          example: 200
          readOnly: true
          nullable: true
        assignee:
          allOf:
            - $ref: "#/components/schemas/UserCompact"
            - type: object
              nullable: true
        assignee_section:
          allOf:
            - $ref: "#/components/schemas/SectionCompact"
            - type: object
              nullable: true
            - description: >-
                The *assignee section* is a subdivision of a project that groups
                tasks together in the assignee's "My Tasks" list. It can either
                be a
                header above a list of tasks in a list view or a column in a board
                view of "My Tasks."

                The `assignee_section` property will be returned in the response
                only
                if the request was sent by the user who is the assignee of the
                task.
                Note that you can only write to `assignee_section` with the gid
                of an
                existing section visible in the user's "My Tasks" list.
        custom_fields:
          description: >-
            Array of custom field values applied to the task. These
            represent the custom field values recorded on this project for a
            particular custom field. For example, these custom field values
            will contain an `enum_value` property for custom fields of type
            `enum`, a `text_value` property for custom fields of type
            `text`, and so on. Please note that the `gid` returned on each
            custom field value *is identical* to the `gid` of the custom field,
            which allows referencing the custom field metadata through the
            `/custom_fields/custom_field-gid` endpoint.
          type: array
          items:
            $ref: "#/components/schemas/CustomFieldResponse"
          readOnly: true
        followers:
          description: Array of users following this task.
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/UserCompact"
        parent:
          allOf:
            - $ref: "#/components/schemas/TaskCompact"
            - type: object
              readOnly: true
              description: >-
                The parent of this task, or `null` if this is not a subtask.
                This property cannot be modified using a PUT request but you
                can change it with the `setParent` endpoint. You can create
                subtasks by using the subtasks endpoint.
              nullable: true
        projects:
          description: >-
            *Create-only.* Array of projects this task is associated with.
            At task creation time, this array can be used to add the task to
            many projects at once. After task creation, these associations can
            be modified using the addProject and removeProject endpoints.
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/ProjectCompact"
        tags:
          description: >-
            Array of tags associated with this task. In order to change tags on
            an
            existing task use `addTag` and `removeTag`.
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/TagCompact"
          example:
            - gid: "59746"
              name: Grade A
        workspace:
          allOf:
            - $ref: "#/components/schemas/WorkspaceCompact"
            - type: object
              readOnly: true
              description: >-
                *Create-only*. The workspace this task is associated with.
                Once created, task cannot be moved to a different workspace.
                This attribute can only be specified at creation time.
        permalink_url:
          type: string
          readOnly: true
          description: >-
            A url that points directly to the object within Asana.
          example: https://app.asana.com/0/resource/123456789/list
    TaskRequest:
      type: object
      properties:
        name:
          description: The name of the task.
          type: string
          example: Bug Task
        resource_subtype:
          type: string
          description: >-
            The subtype of this resource. Different subtypes retain many of
            the same fields and behavior, but may render differently in Asana
            or represent resources with different semantic meaning.

            The resource_subtype `milestone` represent a single moment in
            time. This means tasks with this subtype cannot have a start_date.
          enum:
            - default_task
            - milestone
            - section
            - approval
          example: default_task
        approval_status:
          type: string
          description: >-
            *Conditional* Reflects the approval status of this task. This
            field is kept in sync with `completed`, meaning `pending`
            translates to false while `approved`, `rejected`, and
            `changes_requested` translate to true. If you set completed
            to true, this field will be set to `approved`.
          enum:
            - pending
            - approved
            - rejected
            - changes_requested
          example: pending
        assignee_status:
          description: >-
            *Deprecated* Scheduling status of this task for the user it is assigned
            to.
            This field can only be set if the assignee is non-null.
            Setting this field to "inbox" or "upcoming" inserts it at the top
            of the section, while the other options will insert at the bottom.
          type: string
          enum:
            - today
            - upcoming
            - later
            - new
            - inbox
          example: upcoming
        completed:
          description: >-
            True if the task is currently marked complete, false if not.
          type: boolean
          example: false
        due_at:
          description: >-
            The UTC date and time on which this task is due, or null if the
            task has no due time. This takes an ISO 8601 date string in UTC
            and should not be used together with `due_on`.
          type: string
          format: date
          example: "2019-09-15"
          nullable: true
        due_on:
          description: >-
            The localized date on which this task is due, or null if the task
            has no due date. This takes a date with `YYYY-MM-DD` format and
            should not be used together with `due_at`.
          type: string
          format: date
          example: "2019-09-15"
          nullable: true
        external:
          description: >-
            *OAuth Required*. *Conditional*. This field is returned only
            if external values are set or included by using [Opt In]
            (/docs/inputoutput-options).

            The external field allows you to store app-specific metadata on
            tasks, including a gid that can be used to retrieve tasks and a
            data blob that can store app-specific character strings. Note that
            you will need to authenticate with Oauth to access or modify this
            data. Once an external gid is set, you can use the notation
            `external:custom_gid` to reference your object anywhere in the API
            where you may use the original object gid. See the page on Custom
            External Data for more details.
          type: object
          properties:
            gid:
              type: string
              example: "1234"
            data:
              type: string
              example: A blob of information.
          example:
            gid: my_gid
            data: A blob of information
        html_notes:
          description: >-
            [Opt
            In](/docs/inputoutput-options).
            The notes of the text with formatting as HTML.
          type: string
          example: >-
            <body>Mittens <em>really</em> likes the stuff from
            Humboldt.</body>
        liked:
          description: >-
            True if the task is liked by the authorized user, false if not.
          type: boolean
          example: true
        notes:
          description: >-
            Free-form textual information associated with the
            task (i.e. its description).
          type: string
          example: Mittens really likes the stuff from Humboldt.
        start_at:
          description: >-
            Date and time on which work begins for the task, or null if the task
            has no start time. This takes an ISO 8601 date string in UTC
            and should not be used together with `start_on`.

            *Note: `due_at` must be present in the request when
            setting or unsetting the `start_at` parameter.*
          type: string
          nullable: true
          format: date
          example: "2019-09-14"
        start_on:
          description: >-
            The day on which work begins for the task , or null if the task
            has no start date. This takes a date with `YYYY-MM-DD` format and
            should not be used together with `start_at`.

            *Note: `due_on` or `due_at` must be present in the request when
            setting or unsetting the `start_on` parameter.*
          type: string
          nullable: true
          format: date
          example: "2019-09-14"
        assignee_section:
          nullable: true
          type: string
          description: >-
            The *assignee section* is a subdivision of a project that groups
            tasks together in the assignee's "My Tasks" list. It can either be
            a
            header above a list of tasks in a list view or a column in a board
            view of "My Tasks."

            The `assignee_section` property will be returned in the response only
            if the request was sent by the user who is the assignee of the task.
            Note that you can only write to `assignee_section` with the gid of
            an
            existing section visible in the user's "My Tasks" list.
          example: "12345"
        custom_fields:
          description: >-
            An object where each key is a Custom Field GID and each value is
            an enum GID, string, number, object, or array.
          type: object
          additionalProperties:
            type: string
            description: >-
              "{custom_field_gid}" => Value (Can be text, number, etc.)
          example:
            "5678904321": On Hold
            "4578152156": Not Started
        followers:
          type: array
          description: >-
            *Create-Only* An array of strings identifying users. These can
            either be the string "me", an email, or the gid of a user. In
            order to change followers on an existing task use `addFollowers`
            and `removeFollowers`.
          items:
            type: string
            description: >-
              Gid of a user.
          example:
            - "12345"
        projects:
          type: array
          description: >-
            *Create-Only* Array of project gids. In order to change projects on
            an
            existing task use `addProject` and `removeProject`.
          items:
            type: string
            description: >-
              Gid of a project.
          example:
            - "12345"
        tags:
          type: array
          description: >-
            *Create-Only* Array of tag gids. In order to change tags on an
            existing task use `addTag` and `removeTag`.
          items:
            type: string
            description: >-
              Gid of a tag.
          example:
            - "12345"
    TeamCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: task
        name:
          description: The name of the team.
          type: string
          example: Marketing
    UserCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: user
        name:
          type: string
          description: >-
            *Read-only except when same user as requester*. The user’s name.
          example: Greg Sanchez
    UserResponse:
      type: object
      properties:
        gid:
          description: Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: user
        name:
          type: string
          description: >-
            *Read-only except when same user as requester*. The user’s name.
          example: Greg Sanchez
        email:
          type: string
          format: email
          readOnly: true
          description: The user's email address.
          example: gsanchez@example.com
        photo:
          type: object
          nullable: true
          properties:
            image_21x21:
              type: string
              format: uri
              example: https://...
            image_27x27:
              type: string
              format: uri
              example: https://...
            image_36x36:
              type: string
              format: uri
              example: https://...
            image_60x60:
              type: string
              format: uri
              example: https://...
            image_128x128:
              type: string
              format: uri
              example: https://...
            image_1024x1024:
              type: string
              format: uri
              example: https://...
          readOnly: true
          description: >-
            A map of the user’s profile photo in various sizes, or null if no
            photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All
            images are in PNG format, except for 1024 (which is in JPEG format).
          example:
            image_21x21: https://...
            image_27x27: https://...
            image_36x36: https://...
            image_60x60: https://...
            image_128x128: https://...
            image_1024x1024: https://...
        workspaces:
          description: |-
            Workspaces and organizations this user may access.

            Note: The API will only return workspaces and organizations that
            also contain the authenticated user.
          readOnly: true
          type: array
          items:
            type: object
            properties:
              gid:
                description: Globally unique identifier of the resource, as a string.
                type: string
                readOnly: true
                example: "12345"
              resource_type:
                description: The base type of this resource.
                type: string
                readOnly: true
                example: workspace
              name:
                description: The name of the workspace.
                type: string
                example: My Company Workspace
    WorkspaceCompact:
      type: object
      properties:
        gid:
          description: >-
            Globally unique identifier of the resource, as a string.
          type: string
          readOnly: true
          example: "12345"
        resource_type:
          description: The base type of this resource.
          type: string
          readOnly: true
          example: workspace
        name:
          description: The name of the workspace.
          type: string
          example: My Company Workspace
  securitySchemes:
    personal_access_token:
      type: http
      description: >-
        A personal access token allows access to the api for the user who
        created it. This should be kept a secret and be treated like a
        password.
      scheme: bearer
    oauth2:
      type: oauth2
      description: >-
        We require that applications designed to access the Asana API on behalf
        of multiple users implement OAuth 2.0.
        Asana supports the Authorization Code Grant flow.
      flows:
        authorizationCode:
          authorizationUrl: https://app.asana.com/-/oauth_authorize
          tokenUrl: https://app.asana.com/-/oauth_token
          refreshUrl: https://app.asana.com/-/oauth_token
          scopes:
            default: >-
              Provides access to all endpoints documented in our API reference.
              If no scopes are requested, this scope is assumed by default.
            openid: >-
              Provides access to OpenID Connect ID tokens and the OpenID Connect
              user info endpoint.
            email: >-
              Provides access to the user’s email through the OpenID Connect
              user info endpoint.
            profile: >-
              Provides access to the user’s name and profile photo through the
              OpenID Connect user info endpoint.
security:
  - personal_access_token: []
  - oauth2: []
tags:
  - name: Projects
    description: |-
      A project represents a prioritized list of tasks in Asana or a board
      with columns of tasks represented as cards. A project exists in a single
      workspace or organization and is accessible to a subset of users in that
      workspace or organization, depending on its permissions.

      Projects in organizations are shared with a single team. Currently, the team
      of a project cannot be changed via the API. Non-organization
      workspaces do not have teams and so you should not specify the team of
      project in a regular workspace.

      Followers of a project are a subset of the members of that project.
      Followers of a project will receive all updates including tasks
      created, added and removed from that project. Members of the project
      have access to and will receive status updates of the project. Adding
      followers to a project will add them as members if they are not
      already, removing followers from a project will not affect membership.

      **Note:** You can use certain project endpoints to operate on
      [user task lists](/reference/user-task-lists) ([My Tasks](https://asana.com/guide/help/fundamentals/my-tasks))
      by substituting the `{project_gid}` with the `{user_task_list_gid}`. For example, you can perform
      operations on the custom fields of a user task list by using the following
      projects endpoints: [Add a custom field to a project](/reference/addcustomfieldsettingforproject),
      [Remove a custom field from a project](/reference/removecustomfieldsettingforproject) and
      [Get a project's custom fields](/reference/getcustomfieldsettingsforproject)
  - name: Tasks
    description: |-
      The task is the basic object around which many operations in Asana are
      centered. In the Asana application, multiple tasks populate the
      middle pane according to some view parameters, and the set of selected
      tasks determines the more detailed information presented in the
      details pane.

      Sections are unique in that they will be included in the `memberships`
      field of task objects returned in the API when the task is within a
      section. They can also be used to manipulate the ordering of a task
      within a project.

      [Queries](/reference/gettasks)
      return a [compact representation of each task object](/reference/tasks). To
      retrieve *all* fields or *specific set* of the fields, use
      [field selectors](/docs/inputoutput-options) to manipulate what data is included in a response.
  - name: Sections
    description: >-
      A section is a subdivision of a project that groups tasks together.
      It can either be a header above a list of tasks in a list view or a
      column in a board view of a project.


      Sections are largely a shared idiom in Asana’s API for both list and
      board views of a project regardless of the project’s layout.


      The ‘memberships’ property when [getting a task](/reference/gettask)
      will return the information for the section or the column under
      ‘section’ in the response.
  - name: Typeahead
    description: >-
      The typeahead search API provides search for objects from a single
      workspace.
  - name: Users
    description: >-
      A user object represents an account in Asana that can be given access to
      various workspaces, projects, and tasks.
externalDocs:
  description: API Reference
  url: https://developers.asana.com/reference
